[{"/Users/anna.welc/PhpstormProjects/planner/frontend/src/index.tsx":"1","/Users/anna.welc/PhpstormProjects/planner/frontend/src/App.tsx":"2","/Users/anna.welc/PhpstormProjects/planner/frontend/src/reportWebVitals.ts":"3","/Users/anna.welc/PhpstormProjects/planner/frontend/src/useFetch.ts":"4","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipes.tsx":"5","/Users/anna.welc/PhpstormProjects/planner/frontend/src/AddRecipe.tsx":"6","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Home.tsx":"7","/Users/anna.welc/PhpstormProjects/planner/frontend/src/ShoppingList.tsx":"8","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipe.tsx":"9","/Users/anna.welc/PhpstormProjects/planner-frontend/src/index.tsx":"10","/Users/anna.welc/PhpstormProjects/planner-frontend/src/reportWebVitals.ts":"11","/Users/anna.welc/PhpstormProjects/planner-frontend/src/App.tsx":"12","/Users/anna.welc/PhpstormProjects/planner-frontend/src/AddRecipeConnector.tsx":"13","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Home.tsx":"14","/Users/anna.welc/PhpstormProjects/planner-frontend/src/ShoppingList.tsx":"15","/Users/anna.welc/PhpstormProjects/planner-frontend/src/useFetch.ts":"16","/Users/anna.welc/PhpstormProjects/planner-frontend/src/AddRecipe.tsx":"17","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipes.tsx":"18","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipe.tsx":"19","/Users/anna.welc/PhpstormProjects/planner-frontend/src/constants/config.ts":"20"},{"size":500,"mtime":1606838642657,"results":"21","hashOfConfig":"22"},{"size":1464,"mtime":1607013842732,"results":"23","hashOfConfig":"22"},{"size":425,"mtime":1606838642659,"results":"24","hashOfConfig":"22"},{"size":1053,"mtime":1606894624135,"results":"25","hashOfConfig":"22"},{"size":682,"mtime":1607261228394,"results":"26","hashOfConfig":"22"},{"size":6905,"mtime":1607167882854,"results":"27","hashOfConfig":"22"},{"size":4363,"mtime":1607279436987,"results":"28","hashOfConfig":"22"},{"size":1387,"mtime":1607287397351,"results":"29","hashOfConfig":"22"},{"size":987,"mtime":1607277413335,"results":"30","hashOfConfig":"22"},{"size":500,"mtime":1606838642657,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":1606838642659,"results":"33","hashOfConfig":"32"},{"size":1464,"mtime":1607013842732,"results":"34","hashOfConfig":"32"},{"size":395,"mtime":1607013796301,"results":"35","hashOfConfig":"32"},{"size":4448,"mtime":1609353109077,"results":"36","hashOfConfig":"32"},{"size":1423,"mtime":1609336715388,"results":"37","hashOfConfig":"32"},{"size":1052,"mtime":1609352584419,"results":"38","hashOfConfig":"32"},{"size":6890,"mtime":1609336775220,"results":"39","hashOfConfig":"32"},{"size":778,"mtime":1607277334439,"results":"40","hashOfConfig":"32"},{"size":987,"mtime":1607277413335,"results":"41","hashOfConfig":"32"},{"size":152,"mtime":1609337446449,"results":"42","hashOfConfig":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eotryk",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"1ls2dmj",{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"63"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"63"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"/Users/anna.welc/PhpstormProjects/planner/frontend/src/index.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/App.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/reportWebVitals.ts",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/useFetch.ts",["86"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipes.tsx",["87"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/AddRecipe.tsx",["88","89","90","91","92"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Home.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/ShoppingList.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipe.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/index.tsx",[],["93","94"],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/reportWebVitals.ts",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/App.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/AddRecipeConnector.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/Home.tsx",["95"],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/ShoppingList.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/useFetch.ts",["96"],"import { useState, useEffect } from 'react';\n\nexport type MethodTypeValues = 'POST' | 'PATCH' | 'DELETE' | 'GET';\n\nexport const MethodType: { [key in MethodTypeValues]: MethodTypeValues } = {\n  POST: 'POST',\n  PATCH: 'PATCH',\n  DELETE: 'DELETE',\n  GET: 'GET'\n};\n\nexport const fetchData = async (url: string, method: MethodTypeValues, body: any) => {\n  const requestOptions = {\n    method: method,\n    headers: { 'Content-Type': 'application/json' },\n  };\n\n  if (body) {\n    // @ts-ignore\n    requestOptions.body = JSON.stringify(body);\n  }\n\n  console.log(requestOptions);\n  return await fetch(url, requestOptions).then(response => response.json());\n};\n\nexport const useFetch = (url: string, method = MethodType.GET, body: any) => {\n  const [status, setStatus] = useState('idle');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (!url) return;\n    setStatus('fetching');\n    fetchData(url, method, body).then((result) => {\n      setData(result);\n      setStatus('fetched');\n    });\n  }, [url, method]);\n\n  return { status, data };\n};","/Users/anna.welc/PhpstormProjects/planner-frontend/src/AddRecipe.tsx",["97","98","99"],"import React, { FunctionComponent, useState } from 'react';\nimport { Form, Input, Button, Layout, Typography, Upload, Modal, Select } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { withFormik, FormikErrors, FormikProps } from 'formik';\n\nimport { BASE_URL } from './constants/config';\n\nconst { Option } = Select;\n\ninterface FormValues {\n  name: string;\n  description?: string;\n}\n\ninterface Props {\n  submit: (values: FormValues) => Promise<FormikErrors<FormValues> | null>;\n}\n\ninterface Ingredient {\n  name: string | null;\n  count: string | null;\n  unit: string;\n}\n\n// @ts-ignore\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst { Content } = Layout;\nconst { Title } = Typography;\n\nexport const AddRecipe: FunctionComponent<FormikProps<FormValues> & Props> = ({ values, handleSubmit, handleChange, handleBlur }) => {\n  const [ingredients, addIngredients] = useState<Ingredient[]>([]);\n  const [ingredient, setIngredient] = useState<Ingredient>({\n    name: null,\n    count: null,\n    unit: 'gram'\n  });\n  const [images, setImages] = useState({\n    previewVisible: false,\n    previewImage: '',\n    previewTitle: '',\n    fileList: [],\n  });\n  const [experyment, setExperyemnt] = useState(null);\n\n  // @ts-ignore\n  const handleIngredientNameChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      name: e.target.value\n    });\n  };\n\n  // @ts-ignore\n  const handleIngredientCountChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      count: e.target.value\n    });\n  };\n\n  // @ts-ignore\n  const handleIngredientUnitChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      unit: e\n    });\n  };\n\n  // @ts-ignore\n  const handleAddIngredientClick= (e) => {\n    if (ingredient.name && ingredient.count) {\n      const ingredientsList = [...ingredients];\n      ingredientsList.push(ingredient);\n      addIngredients(ingredientsList);\n    }\n  };\n\n  const handleCancel = () => setImages({\n    ...images,\n    previewVisible: false\n  });\n\n  // @ts-ignore\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    setImages({\n      ...images,\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\n    });\n  };\n\n  // @ts-ignore\n  const handleChangeImage = ({ fileList }) => {\n    setImages({\n      ...images,\n      fileList: fileList\n    });\n    console.log('filelist', fileList);\n  };\n\n  const onFinish = () => {\n    const formData = new FormData();\n    // @ts-ignore\n    formData.append('file', images.fileList[0].originFileObj);\n    formData.append('name', values.name);\n    if (values.description) {\n      formData.append('description', values.description);\n    }\n    if (ingredients && ingredients.length) {\n      formData.append('ingredients', JSON.stringify(ingredients));\n    }\n\n    fetch(`${BASE_URL}/recipes`, {\n      method: 'POST',\n      body: formData\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data)\n      })\n      .catch(error => console.log(error));\n\n    handleSubmit();\n  };\n\n  // @ts-ignore\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div style={{ marginTop: 8 }}>Upload</div>\n    </div>\n  );\n\n  // @ts-ignore\n  const testInput = (event) => {\n    console.log(event.target.files);\n  };\n\n  const { previewVisible, previewImage, fileList, previewTitle } = images;\n\n  return (\n    <Layout>\n      <Content style={{ padding: '50px' }}>\n        <Title level={2}>\n          Add recipe\n        </Title>\n        <Form\n          {...layout}\n          name='basic'\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label='Name'\n            rules={[{ required: true, message: 'Please input recipe name!' }]}\n            name='name'\n          >\n            <Input value={values.name} name='name' onChange={handleChange} onBlur={handleBlur} />\n          </Form.Item>\n\n          <Form.Item\n            label='Description'\n            rules={[{ required: false }]}\n          >\n            <Input.TextArea value={values.description} name='description' onChange={handleChange} onBlur={handleBlur} />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            {ingredients && ingredients.map((item, key) =>  <div key={key}>{item.name}, {item.count} {item.unit}</div>)}\n          </Form.Item>\n          <Form.Item label='Add ingredient'>\n            <Input.Group compact>\n              <Input style={{ width: '200px' }} onChange={handleIngredientNameChange} />\n              <Input style={{ width: '80px' }} onChange={handleIngredientCountChange} />\n              <Select defaultValue=\"gram\" onChange={handleIngredientUnitChange}>\n                <Option value=\"gram\">gram</Option>\n                <Option value=\"unit\">unit</Option>\n              </Select>\n              <Button type=\"primary\" onClick={handleAddIngredientClick}><PlusOutlined /></Button>\n            </Input.Group>\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Upload\n              listType='picture-card'\n              fileList={fileList}\n              onPreview={handlePreview}\n              onChange={handleChangeImage}\n              beforeUpload={() => false}\n              // customRequest={handleUploadImage}\n            >\n              {fileList.length >= 1 ? null : uploadButton}\n            </Upload>\n            <Modal\n              visible={previewVisible}\n              title={previewTitle}\n              footer={null}\n              onCancel={handleCancel}\n            >\n              <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n            </Modal>\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button type='primary' htmlType='submit'>\n              Add recipe\n            </Button>\n          </Form.Item>\n        </Form>\n      </Content>\n    </Layout>\n  );\n};\n\nexport const AddRecipeForm = withFormik<Props, FormValues>({\n  mapPropsToValues: () => ({ name: '', description: '' }),\n\n  // Custom sync validation\n  validate: values => {\n    const errors = {};\n\n    if (!values.name) {\n      // @ts-ignore\n      errors.name = 'Required';\n    }\n\n    return errors;\n  },\n\n  handleSubmit: (values, { setSubmitting }) => {\n    setSubmitting(false);\n  },\n\n  displayName: 'BasicForm',\n})(AddRecipe);","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipes.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipe.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/constants/config.ts",[],{"ruleId":"100","severity":1,"message":"101","line":38,"column":6,"nodeType":"102","endLine":38,"endColumn":19,"suggestions":"103"},{"ruleId":null,"fatal":true,"severity":2,"message":"104","line":16,"column":0},{"ruleId":"105","severity":1,"message":"106","line":6,"column":10,"nodeType":"107","messageId":"108","endLine":6,"endColumn":19},{"ruleId":"105","severity":1,"message":"109","line":6,"column":21,"nodeType":"107","messageId":"108","endLine":6,"endColumn":31},{"ruleId":"105","severity":1,"message":"110","line":59,"column":10,"nodeType":"107","messageId":"108","endLine":59,"endColumn":20},{"ruleId":"105","severity":1,"message":"111","line":59,"column":22,"nodeType":"107","messageId":"108","endLine":59,"endColumn":35},{"ruleId":"105","severity":1,"message":"112","line":160,"column":9,"nodeType":"107","messageId":"108","endLine":160,"endColumn":18},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"105","severity":1,"message":"117","line":6,"column":10,"nodeType":"107","messageId":"108","endLine":6,"endColumn":18},{"ruleId":"100","severity":1,"message":"101","line":38,"column":6,"nodeType":"102","endLine":38,"endColumn":19,"suggestions":"118"},{"ruleId":"105","severity":1,"message":"110","line":59,"column":10,"nodeType":"107","messageId":"108","endLine":59,"endColumn":20},{"ruleId":"105","severity":1,"message":"111","line":59,"column":22,"nodeType":"107","messageId":"108","endLine":59,"endColumn":35},{"ruleId":"105","severity":1,"message":"112","line":160,"column":9,"nodeType":"107","messageId":"108","endLine":160,"endColumn":18},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'body'. Either include it or remove the dependency array.","ArrayExpression",["119"],"Parsing error: Type expected.","@typescript-eslint/no-unused-vars","'fetchData' is defined but never used.","Identifier","unusedVar","'MethodType' is defined but never used.","'experyment' is assigned a value but never used.","'setExperyemnt' is assigned a value but never used.","'testInput' is assigned a value but never used.","no-native-reassign",["120"],"no-negated-in-lhs",["121"],"'useFetch' is defined but never used.",["122"],{"desc":"123","fix":"124"},"no-global-assign","no-unsafe-negation",{"desc":"123","fix":"125"},"Update the dependencies array to be: [url, method, body]",{"range":"126","text":"127"},{"range":"128","text":"127"},[1007,1020],"[url, method, body]",[1006,1019]]