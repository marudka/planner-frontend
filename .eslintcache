[{"/Users/anna.welc/PhpstormProjects/planner/frontend/src/index.tsx":"1","/Users/anna.welc/PhpstormProjects/planner/frontend/src/App.tsx":"2","/Users/anna.welc/PhpstormProjects/planner/frontend/src/reportWebVitals.ts":"3","/Users/anna.welc/PhpstormProjects/planner/frontend/src/useFetch.ts":"4","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipes.tsx":"5","/Users/anna.welc/PhpstormProjects/planner/frontend/src/AddRecipe.tsx":"6","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Home.tsx":"7","/Users/anna.welc/PhpstormProjects/planner/frontend/src/ShoppingList.tsx":"8","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipe.tsx":"9","/Users/anna.welc/PhpstormProjects/planner-frontend/src/index.tsx":"10","/Users/anna.welc/PhpstormProjects/planner-frontend/src/reportWebVitals.ts":"11","/Users/anna.welc/PhpstormProjects/planner-frontend/src/App.tsx":"12","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Home.tsx":"13","/Users/anna.welc/PhpstormProjects/planner-frontend/src/ShoppingList.tsx":"14","/Users/anna.welc/PhpstormProjects/planner-frontend/src/useFetch.ts":"15","/Users/anna.welc/PhpstormProjects/planner-frontend/src/AddRecipe.tsx":"16","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipes.tsx":"17","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipe.tsx":"18","/Users/anna.welc/PhpstormProjects/planner-frontend/src/constants/config.ts":"19","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Context.tsx":"20","/Users/anna.welc/PhpstormProjects/planner-frontend/src/useRecipesContext.ts":"21","/Users/anna.welc/PhpstormProjects/planner-frontend/src/DrawerContent.tsx":"22","/Users/anna.welc/PhpstormProjects/planner-frontend/src/EditForm.tsx":"23","/Users/anna.welc/PhpstormProjects/planner-frontend/src/context/socket.tsx":"24"},{"size":500,"mtime":1606838642657,"results":"25","hashOfConfig":"26"},{"size":1464,"mtime":1607013842732,"results":"27","hashOfConfig":"26"},{"size":425,"mtime":1606838642659,"results":"28","hashOfConfig":"26"},{"size":1053,"mtime":1606894624135,"results":"29","hashOfConfig":"26"},{"size":682,"mtime":1607261228394,"results":"30","hashOfConfig":"26"},{"size":6905,"mtime":1607167882854,"results":"31","hashOfConfig":"26"},{"size":4363,"mtime":1607279436987,"results":"32","hashOfConfig":"26"},{"size":1387,"mtime":1607287397351,"results":"33","hashOfConfig":"26"},{"size":987,"mtime":1607277413335,"results":"34","hashOfConfig":"26"},{"size":500,"mtime":1606838642657,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1606838642659,"results":"37","hashOfConfig":"36"},{"size":1779,"mtime":1611604599183,"results":"38","hashOfConfig":"36"},{"size":6840,"mtime":1619370308199,"results":"39","hashOfConfig":"36"},{"size":2068,"mtime":1611607634405,"results":"40","hashOfConfig":"36"},{"size":1022,"mtime":1609432522750,"results":"41","hashOfConfig":"36"},{"size":8456,"mtime":1618770209398,"results":"42","hashOfConfig":"36"},{"size":1046,"mtime":1618690622868,"results":"43","hashOfConfig":"36"},{"size":2099,"mtime":1618758673579,"results":"44","hashOfConfig":"36"},{"size":216,"mtime":1609419242861,"results":"45","hashOfConfig":"36"},{"size":1446,"mtime":1609447320314,"results":"46","hashOfConfig":"36"},{"size":225,"mtime":1609429116021,"results":"47","hashOfConfig":"36"},{"size":1691,"mtime":1618762607067,"results":"48","hashOfConfig":"36"},{"size":5717,"mtime":1618691856621,"results":"49","hashOfConfig":"36"},{"size":255,"mtime":1611605861585,"results":"50","hashOfConfig":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eotryk",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"m0w7v6",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"71"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"71"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"71"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"71"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"71"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"/Users/anna.welc/PhpstormProjects/planner/frontend/src/index.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/App.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/reportWebVitals.ts",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/useFetch.ts",["105"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipes.tsx",["106"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/AddRecipe.tsx",["107","108","109","110","111"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Home.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/ShoppingList.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipe.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/index.tsx",[],["112","113"],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/reportWebVitals.ts",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/App.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/Home.tsx",["114"],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/ShoppingList.tsx",["115"],"import React, { FunctionComponent, useState, useEffect, useContext } from 'react';\nimport { Layout, Spin, Typography, DatePicker } from 'antd';\nimport moment from 'moment';\n\nimport { RecipeType } from './Recipes';\nimport { useRecipesContext } from './useRecipesContext';\nimport { SocketContext } from './context/socket';\n\nconst { Content } = Layout;\nconst { Title } = Typography;\n\nexport const ShoppingList: FunctionComponent = () => {\n  const { recipes } = useRecipesContext();\n  const time = moment().format('L');\n  const [date, setDate] = useState(time);\n  const [actualRecipes, setActualRecipes] = useState<RecipeType[] | []>([]);\n  const recipesStatus = !recipes.length ? <Spin /> : null;\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    setActualRecipes(recipes)\n  }, [recipes]);\n\n  useEffect(() => {\n    // @ts-ignore\n    socket.on('RECIPE_ADDED_TO_DAY', (data: RecipeType) => {\n      const changedRecipes = recipes.map((item) => {\n        if (item._id === data._id) {\n          return data;\n        }\n        return item;\n      });\n      setActualRecipes(changedRecipes);\n    });\n  }, [socket]);\n\n  const handleChange = (date: any) => {\n    setDate(moment(date).format('L'));\n  };\n\n  console.log('recipes', recipes);\n  console.log('actual', actualRecipes);\n\n  const recipesList = actualRecipes.filter((item: RecipeType) => {\n    if (!item.days) {\n      return false;\n    }\n    return Boolean(item.days[date]);\n  });\n\n  // @ts-ignore\n  return (\n    <Layout>\n      <Content style={{ padding: '50px' }}>\n        <Title level={2}>\n          Shopping list\n        </Title>\n        <Title level={5}>Select date to chose ingredients list to buy</Title>\n        <DatePicker onChange={handleChange} defaultValue={moment()} style={{ marginBottom: '20px' }} />\n        {recipesStatus}\n        {\n          recipesList.map((item) => {\n            return item.days[date].map((item, index) => {\n              return <div key={index}>{item.name}, {item.count} {item.unit}</div>\n            });\n          })\n        }\n      </Content>\n    </Layout>\n  );\n};\n","/Users/anna.welc/PhpstormProjects/planner-frontend/src/useFetch.ts",["116"],"import { useState, useEffect } from 'react';\n\nexport type MethodTypeValues = 'POST' | 'PATCH' | 'DELETE' | 'GET';\n\nexport const MethodType: { [key in MethodTypeValues]: MethodTypeValues } = {\n  POST: 'POST',\n  PATCH: 'PATCH',\n  DELETE: 'DELETE',\n  GET: 'GET'\n};\n\nexport const fetchData = async (url: string, method: MethodTypeValues, body?: any) => {\n  const requestOptions = {\n    method: method,\n    headers: { 'Content-Type': 'application/json' },\n  };\n\n  if (body) {\n    // @ts-ignore\n    requestOptions.body = JSON.stringify(body);\n  }\n\n  return await fetch(url, requestOptions).then(response => response.json());\n};\n\nexport const useFetch = (url: string, method = MethodType.GET, body: any) => {\n  const [status, setStatus] = useState('idle');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (!url) return;\n    setStatus('fetching');\n    fetchData(url, method, body).then((result) => {\n      setData(result);\n      setStatus('fetched');\n    });\n  }, [url, method]);\n\n  return { status, data };\n};","/Users/anna.welc/PhpstormProjects/planner-frontend/src/AddRecipe.tsx",["117","118","119","120"],"import React, { FunctionComponent, useState } from 'react';\nimport { Form, Input, Button, Layout, Typography, Upload, Modal, Select, Alert, Checkbox, Row, Col } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useFormik } from 'formik';\n\nimport { BASE_URL } from './constants/config';\nimport { useRecipesContext } from './useRecipesContext';\n\nconst { Option } = Select;\n\ninterface AddRecipeProps {}\n\ninterface Ingredient {\n  name: string | null;\n  count: string | null;\n  unit: string;\n}\n\n// @ts-ignore\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst { Content } = Layout;\nconst { Title } = Typography;\n\nexport const AddRecipe: FunctionComponent<AddRecipeProps> = () => {\n  const [ingredients, addIngredients] = useState<Ingredient[]>([]);\n  const [ingredient, setIngredient] = useState<Ingredient>({\n    name: null,\n    count: null,\n    unit: 'gram'\n  });\n  const [images, setImages] = useState({\n    previewVisible: false,\n    previewImage: '',\n    previewTitle: '',\n    fileList: [],\n  });\n  const [isAlertVisible, setAlertVisibility] = useState(false);\n  const { recipes, setRecipes, getRecipes } = useRecipesContext();\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      description: '',\n      isVege: false,\n      isGlutenFree: false,\n      portions: '',\n      calories: ''\n    },\n    validate: values => {\n      console.log('values', values)\n      setAlertVisibility(false);\n      const errors = {};\n      if (!values.name) {\n        // @ts-ignore\n        errors.name = 'Required';\n      }\n      return errors;\n    },\n    onSubmit: (values, { resetForm, setSubmitting }) => {\n      setSubmitting(false);\n      resetForm();\n\n      const formData = new FormData();\n      if (images.fileList.length) {\n        // @ts-ignore\n        formData.append('file', images.fileList[0].originFileObj);\n      }\n      formData.append('name', values.name);\n      formData.append('isVege', String(values.isVege));\n      formData.append('isGlutenFree', String(values.isGlutenFree));\n      if (values.description) {\n        formData.append('description', values.description);\n      }\n      if (values.calories) {\n        formData.append('calories', values.calories);\n      }\n      if (values.portions) {\n        formData.append('portions', values.portions);\n      }\n      if (ingredients && ingredients.length) {\n        formData.append('ingredients', JSON.stringify(ingredients));\n      }\n\n      fetch(`${BASE_URL}/recipes`, {\n        method: 'POST',\n        body: formData\n      })\n        .then((response) => response.json())\n        .then(() => {\n          getRecipes();\n          setAlertVisibility(true);\n        })\n        .catch(error => console.log(error));\n    },\n    enableReinitialize: true,\n  });\n\n  // @ts-ignore\n  const handleIngredientNameChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      name: e.target.value\n    });\n  };\n\n  // @ts-ignore\n  const handleIngredientCountChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      count: e.target.value\n    });\n  };\n\n  // @ts-ignore\n  const handleIngredientUnitChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      unit: e\n    });\n  };\n\n  // @ts-ignore\n  const handleAddIngredientClick= (e) => {\n    if (ingredient.name && ingredient.count) {\n      const ingredientsList = [...ingredients];\n      ingredientsList.push(ingredient);\n      addIngredients(ingredientsList);\n    }\n  };\n\n  const handleCancel = () => setImages({\n    ...images,\n    previewVisible: false\n  });\n\n  // @ts-ignore\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    setImages({\n      ...images,\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\n    });\n  };\n\n  // @ts-ignore\n  const handleChangeImage = ({ fileList }) => {\n    setImages({\n      ...images,\n      fileList: fileList\n    });\n  };\n\n  const onFinish = () => {\n    formik.handleSubmit();\n  };\n\n  // @ts-ignore\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div style={{ marginTop: 8 }}>Upload</div>\n    </div>\n  );\n\n  const { previewVisible, previewImage, fileList, previewTitle } = images;\n\n  return (\n    <Layout>\n      <Content style={{ padding: '50px' }}>\n        <Title level={2}>\n          Add recipe\n        </Title>\n        {isAlertVisible && <Alert message='Recipe edited successfully.' type='success' style={{ marginBottom: '15px' }} />}\n        <Form\n          {...layout}\n          name='basic'\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label='Name'\n            rules={[{ required: true, message: 'Please input recipe name!' }]}\n            name='name'\n          >\n            <Input value={formik.values.name} name='name' onChange={formik.handleChange} onBlur={formik.handleBlur} />\n          </Form.Item>\n\n          <Form.Item\n            label='Description'\n            rules={[{ required: false }]}\n          >\n            <Input.TextArea value={formik.values.description} name='description' onChange={formik.handleChange} onBlur={formik.handleBlur} />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            {ingredients && ingredients.map((item, key) =>  <div key={key}>{item.name}, {item.count} {item.unit}</div>)}\n          </Form.Item>\n          <Form.Item label='Add ingredient'>\n            <Input.Group compact>\n              <Input style={{ width: '200px' }} onChange={handleIngredientNameChange} />\n              <Input style={{ width: '80px' }} onChange={handleIngredientCountChange} />\n              <Select defaultValue=\"gram\" onChange={handleIngredientUnitChange}>\n                <Option value=\"gram\">gram</Option>\n                <Option value=\"unit\">unit</Option>\n              </Select>\n              <Button type=\"primary\" onClick={handleAddIngredientClick}><PlusOutlined /></Button>\n            </Input.Group>\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Upload\n              listType='picture-card'\n              fileList={fileList}\n              onPreview={handlePreview}\n              onChange={handleChangeImage}\n              beforeUpload={() => false}\n              // customRequest={handleUploadImage}\n            >\n              {fileList.length >= 1 ? null : uploadButton}\n            </Upload>\n            <Modal\n              visible={previewVisible}\n              title={previewTitle}\n              footer={null}\n              onCancel={handleCancel}\n            >\n              <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n            </Modal>\n          </Form.Item>\n          <Form.Item\n            label='Portions'\n            rules={[{ required: false }]}\n            name='portions'\n          >\n            <Input value={formik.values.portions} name='portions' onChange={formik.handleChange} onBlur={formik.handleBlur} />\n          </Form.Item>\n          <Form.Item\n            label='Calories'\n            rules={[{ required: false }]}\n            name='calories'\n          >\n            <Input value={formik.values.calories} name='calories' onChange={formik.handleChange} onBlur={formik.handleBlur} />\n          </Form.Item>\n          <Form.Item\n            label='Is vegetarian'\n            rules={[{ required: false }]}\n            name='isVege'\n          >\n            <Checkbox onChange={formik.handleChange} name='isVege' />\n          </Form.Item>\n          <Form.Item\n            label='Is gluten free'\n            rules={[{ required: false }]}\n            name='isGlutenFree'\n          >\n            <Checkbox onChange={formik.handleChange} name='isGlutenFree' />\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button type='primary' htmlType='submit'>\n              Add recipe\n            </Button>\n          </Form.Item>\n        </Form>\n      </Content>\n    </Layout>\n  );\n};","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipes.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipe.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/constants/config.ts",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/Context.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/useRecipesContext.ts",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/DrawerContent.tsx",["121"],"import React, { FunctionComponent } from 'react';\nimport { Typography, Descriptions, Image, Tag, Empty } from 'antd';\nimport { useRecipesContext } from './useRecipesContext';\nimport { EditForm } from './EditForm';\n\nconst { Title, Text } = Typography;\n\ninterface DrawerContentProps {\n  id: string;\n  isEditMode: boolean;\n}\n\nexport const DrawerContent: FunctionComponent<DrawerContentProps> = ({ id, isEditMode }) => {\n  const { recipes } = useRecipesContext();\n  const chosenRecipe = recipes.find((item) => item._id === id);\n\n  if (!chosenRecipe) {\n    return <Empty />;\n  }\n\n  const list = chosenRecipe.ingredients.map((item, key) => <li key={key}>{item.name} {item.count}, {item.unit}</li>);\n\n  if (isEditMode) {\n    return <EditForm chosenRecipe={chosenRecipe} id={id} />;\n  }\n\n  return (\n    <>\n      {chosenRecipe.image && (\n        <Image width='100%' height='120' src={chosenRecipe.image} style={{ marginBottom: '12px' }} />\n      )}\n      {chosenRecipe.isVege && <Tag color='green'>Vegetarian</Tag>}\n      {chosenRecipe.isGlutenFree && <Tag color='blue'>Is Gluten free</Tag>}\n      <Title level={3} style={{ marginTop: '10px' }}>{chosenRecipe.name}</Title>\n      {chosenRecipe.description && <Descriptions.Item label='Description'>{chosenRecipe.description}</Descriptions.Item>}\n      {chosenRecipe.ingredients.length && <Title level={5}>Ingredients</Title>}\n      <ul>\n        {list}\n      </ul>\n      <Descriptions>\n        {chosenRecipe.calories && <Descriptions.Item label='Portions'>{chosenRecipe.portions}</Descriptions.Item>}\n        {chosenRecipe.calories && <Descriptions.Item label='Calories'>{chosenRecipe.calories}</Descriptions.Item>}\n      </Descriptions>\n    </>\n  )\n};","/Users/anna.welc/PhpstormProjects/planner-frontend/src/EditForm.tsx",["122","123","124","125","126","127"],"import React, { FunctionComponent, useState } from 'react';\nimport { Input, Form, Select, Button, Alert, Checkbox } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useRecipesContext } from './useRecipesContext';\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { fetchData, MethodType } from './useFetch';\nimport { Ingredient, RecipeType } from './Recipes';\nimport { BASE_URL } from './constants/config';\nimport { useFormik } from 'formik';\n\nconst { Option } = Select;\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\ninterface EditFormProps {\n  id: string;\n  chosenRecipe: RecipeType;\n}\n\nexport const EditForm: FunctionComponent<EditFormProps> = ({ chosenRecipe, id }) => {\n  const { recipes, setRecipes } = useRecipesContext();\n  const [ingredientsList, setIngredients] = useState(chosenRecipe.ingredients);\n  const [isAlertVisible, setAlertVisibility] = useState(false);\n  const formik = useFormik({\n    initialValues: {\n      name: chosenRecipe.name,\n      description: chosenRecipe.description || '',\n      ingredients: chosenRecipe.ingredients || [],\n      isVege: chosenRecipe.isVege,\n      isGlutenFree: chosenRecipe.isGlutenFree,\n      portions: chosenRecipe.portions,\n      calories: chosenRecipe.calories,\n      id: id\n    },\n    validate: values => {\n      setAlertVisibility(false);\n      const errors = {};\n      if (!values.name) {\n        // @ts-ignore\n        errors.name = 'Required';\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      const body = {\n        name: values.name,\n        description: values.description,\n        ingredients: chosenRecipe.ingredients,\n        isVege: values.isVege,\n        isGlutenFree: values.isGlutenFree,\n        portions: values.portions,\n        calories: values.calories\n      };\n\n      fetchData(`${BASE_URL}/recipes/${formik.values.id}`, MethodType.PATCH, body).then(() => {\n        const changedRecipes = recipes.map((item) => {\n          if (item._id === values.id) {\n            return {\n              ...item,\n              name: values.name,\n              description: values.description\n            }\n          }\n          return item;\n        });\n        setRecipes(changedRecipes);\n        setAlertVisibility(true);\n      });\n    },\n    enableReinitialize: true,\n  });\n\n  const list = ingredientsList && ingredientsList.map((item, key) =>\n    <li key={key}>{item.name} {item.count}, {item.unit} <b>minus</b></li>);\n\n  const onFinishFailed = () => {\n    console.log('test finish');\n  };\n\n  const handleBlur = () => {\n\n  };\n\n  const handleIngredientNameChange = () => {\n\n  };\n\n  const handleIngredientCountChange = () => {\n\n  };\n\n  const handleDeleteRecipe = () => {\n    fetchData(`${BASE_URL}/recipes/${formik.values.id}`, MethodType.DELETE).then(() => {\n      const index = recipes.findIndex((item) => item._id === formik.values.id);\n      const copyRecipes = [...recipes];\n      copyRecipes.splice(index, 1);\n      setRecipes(copyRecipes);\n    });\n  };\n\n  console.log('formik', formik.values);\n\n  return (\n    <div>\n      <Form\n        {...layout}\n        name='basic'\n        initialValues={{ remember: true }}\n        onFinish={formik.submitForm}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label='Name'\n          rules={[{ required: true, message: 'Please input recipe name!' }]}\n        >\n          <Input value={formik.values.name} name='name' onChange={formik.handleChange} onBlur={handleBlur} />\n        </Form.Item>\n\n        <Form.Item\n          label='Description'\n          rules={[{ required: false }]}\n        >\n          <Input.TextArea value={formik.values.description} name='description' onChange={formik.handleChange} onBlur={handleBlur} />\n        </Form.Item>\n\n        <Form.Item\n          label='Portions'\n          rules={[{ required: false }]}\n        >\n          <Input value={formik.values.portions} name='portions' onChange={formik.handleChange} onBlur={formik.handleBlur} />\n        </Form.Item>\n        <Form.Item\n          label='Calories'\n          rules={[{ required: false }]}\n        >\n          <Input value={formik.values.calories} name='calories' onChange={formik.handleChange} onBlur={formik.handleBlur} />\n        </Form.Item>\n        <Form.Item\n          label='Is vegetarian'\n          rules={[{ required: false }]}\n        >\n          <Checkbox onChange={formik.handleChange} name='isVege' value={formik.values.isVege} checked={formik.values.isVege} />\n        </Form.Item>\n        <Form.Item\n          label='Is gluten free'\n          rules={[{ required: false }]}\n          name='isGlutenFree'\n        >\n          <Checkbox onChange={formik.handleChange} name='isGlutenFree' value={formik.values.isGlutenFree} checked={formik.values.isGlutenFree} />\n        </Form.Item>\n\n        {list}\n\n        {/*<Form.Item label='Add ingredient'>*/}\n        {/*  <Input.Group compact>*/}\n        {/*    <Input />*/}\n        {/*    <Input />*/}\n        {/*    <Select defaultValue='gram'>*/}\n        {/*      <Option value='gram'>gram</Option>*/}\n        {/*      <Option value='unit'>unit</Option>*/}\n        {/*    </Select>*/}\n        {/*    <Button type='primary'><PlusOutlined /></Button>*/}\n        {/*  </Input.Group>*/}\n        {/*</Form.Item>*/}\n\n        <div>\n          <Button htmlType='submit' icon={<EditOutlined />} style={{ marginRight: '8px' }}>\n            Edit recipe\n          </Button>\n          <Button danger icon={<DeleteOutlined />} onClick={handleDeleteRecipe}>\n            Remove recipe\n          </Button>\n        </div>\n      </Form>\n      {isAlertVisible && <Alert message='Recipe edited successfully.' type='success' style={{ marginTop: '10px' }} />}\n    </div>\n  );\n};","/Users/anna.welc/PhpstormProjects/planner-frontend/src/context/socket.tsx",[],{"ruleId":"128","severity":1,"message":"129","line":38,"column":6,"nodeType":"130","endLine":38,"endColumn":19,"suggestions":"131"},{"ruleId":null,"fatal":true,"severity":2,"message":"132","line":16,"column":0},{"ruleId":"133","severity":1,"message":"134","line":6,"column":10,"nodeType":"135","messageId":"136","endLine":6,"endColumn":19},{"ruleId":"133","severity":1,"message":"137","line":6,"column":21,"nodeType":"135","messageId":"136","endLine":6,"endColumn":31},{"ruleId":"133","severity":1,"message":"138","line":59,"column":10,"nodeType":"135","messageId":"136","endLine":59,"endColumn":20},{"ruleId":"133","severity":1,"message":"139","line":59,"column":22,"nodeType":"135","messageId":"136","endLine":59,"endColumn":35},{"ruleId":"133","severity":1,"message":"140","line":160,"column":9,"nodeType":"135","messageId":"136","endLine":160,"endColumn":18},{"ruleId":"141","replacedBy":"142"},{"ruleId":"143","replacedBy":"144"},{"ruleId":"133","severity":1,"message":"145","line":2,"column":86,"nodeType":"135","messageId":"136","endLine":2,"endColumn":91},{"ruleId":"128","severity":1,"message":"146","line":35,"column":6,"nodeType":"130","endLine":35,"endColumn":14,"suggestions":"147"},{"ruleId":"128","severity":1,"message":"129","line":37,"column":6,"nodeType":"130","endLine":37,"endColumn":19,"suggestions":"148"},{"ruleId":"133","severity":1,"message":"149","line":2,"column":91,"nodeType":"135","messageId":"136","endLine":2,"endColumn":94},{"ruleId":"133","severity":1,"message":"150","line":2,"column":96,"nodeType":"135","messageId":"136","endLine":2,"endColumn":99},{"ruleId":"133","severity":1,"message":"151","line":54,"column":11,"nodeType":"135","messageId":"136","endLine":54,"endColumn":18},{"ruleId":"133","severity":1,"message":"152","line":54,"column":20,"nodeType":"135","messageId":"136","endLine":54,"endColumn":30},{"ruleId":"133","severity":1,"message":"153","line":6,"column":16,"nodeType":"135","messageId":"136","endLine":6,"endColumn":20},{"ruleId":"133","severity":1,"message":"154","line":3,"column":10,"nodeType":"135","messageId":"136","endLine":3,"endColumn":22},{"ruleId":"133","severity":1,"message":"155","line":7,"column":10,"nodeType":"135","messageId":"136","endLine":7,"endColumn":20},{"ruleId":"133","severity":1,"message":"156","line":11,"column":9,"nodeType":"135","messageId":"136","endLine":11,"endColumn":15},{"ruleId":"133","severity":1,"message":"157","line":25,"column":27,"nodeType":"135","messageId":"136","endLine":25,"endColumn":41},{"ruleId":"133","severity":1,"message":"158","line":87,"column":9,"nodeType":"135","messageId":"136","endLine":87,"endColumn":35},{"ruleId":"133","severity":1,"message":"159","line":91,"column":9,"nodeType":"135","messageId":"136","endLine":91,"endColumn":36},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'body'. Either include it or remove the dependency array.","ArrayExpression",["160"],"Parsing error: Type expected.","@typescript-eslint/no-unused-vars","'fetchData' is defined but never used.","Identifier","unusedVar","'MethodType' is defined but never used.","'experyment' is assigned a value but never used.","'setExperyemnt' is assigned a value but never used.","'testInput' is assigned a value but never used.","no-native-reassign",["161"],"no-negated-in-lhs",["162"],"'Empty' is defined but never used.","React Hook useEffect has a missing dependency: 'recipes'. Either include it or remove the dependency array.",["163"],["164"],"'Row' is defined but never used.","'Col' is defined but never used.","'recipes' is assigned a value but never used.","'setRecipes' is assigned a value but never used.","'Text' is assigned a value but never used.","'PlusOutlined' is defined but never used.","'Ingredient' is defined but never used.","'Option' is assigned a value but never used.","'setIngredients' is assigned a value but never used.","'handleIngredientNameChange' is assigned a value but never used.","'handleIngredientCountChange' is assigned a value but never used.",{"desc":"165","fix":"166"},"no-global-assign","no-unsafe-negation",{"desc":"167","fix":"168"},{"desc":"165","fix":"169"},"Update the dependencies array to be: [url, method, body]",{"range":"170","text":"171"},"Update the dependencies array to be: [recipes, socket]",{"range":"172","text":"173"},{"range":"174","text":"171"},[1007,1020],"[url, method, body]",[1113,1121],"[recipes, socket]",[976,989]]