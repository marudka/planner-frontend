[{"/Users/anna.welc/PhpstormProjects/planner/frontend/src/index.tsx":"1","/Users/anna.welc/PhpstormProjects/planner/frontend/src/App.tsx":"2","/Users/anna.welc/PhpstormProjects/planner/frontend/src/reportWebVitals.ts":"3","/Users/anna.welc/PhpstormProjects/planner/frontend/src/useFetch.ts":"4","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipes.tsx":"5","/Users/anna.welc/PhpstormProjects/planner/frontend/src/AddRecipe.tsx":"6","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Home.tsx":"7","/Users/anna.welc/PhpstormProjects/planner/frontend/src/ShoppingList.tsx":"8","/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipe.tsx":"9","/Users/anna.welc/PhpstormProjects/planner-frontend/src/index.tsx":"10","/Users/anna.welc/PhpstormProjects/planner-frontend/src/reportWebVitals.ts":"11","/Users/anna.welc/PhpstormProjects/planner-frontend/src/App.tsx":"12","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Home.tsx":"13","/Users/anna.welc/PhpstormProjects/planner-frontend/src/ShoppingList.tsx":"14","/Users/anna.welc/PhpstormProjects/planner-frontend/src/useFetch.ts":"15","/Users/anna.welc/PhpstormProjects/planner-frontend/src/AddRecipe.tsx":"16","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipes.tsx":"17","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipe.tsx":"18","/Users/anna.welc/PhpstormProjects/planner-frontend/src/constants/config.ts":"19","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Context.tsx":"20","/Users/anna.welc/PhpstormProjects/planner-frontend/src/useRecipesContext.ts":"21","/Users/anna.welc/PhpstormProjects/planner-frontend/src/DrawerContent.tsx":"22","/Users/anna.welc/PhpstormProjects/planner-frontend/src/EditForm.tsx":"23"},{"size":500,"mtime":1606838642657,"results":"24","hashOfConfig":"25"},{"size":1464,"mtime":1607013842732,"results":"26","hashOfConfig":"25"},{"size":425,"mtime":1606838642659,"results":"27","hashOfConfig":"25"},{"size":1053,"mtime":1606894624135,"results":"28","hashOfConfig":"25"},{"size":682,"mtime":1607261228394,"results":"29","hashOfConfig":"25"},{"size":6905,"mtime":1607167882854,"results":"30","hashOfConfig":"25"},{"size":4363,"mtime":1607279436987,"results":"31","hashOfConfig":"25"},{"size":1387,"mtime":1607287397351,"results":"32","hashOfConfig":"25"},{"size":987,"mtime":1607277413335,"results":"33","hashOfConfig":"25"},{"size":500,"mtime":1606838642657,"results":"34","hashOfConfig":"35"},{"size":425,"mtime":1606838642659,"results":"36","hashOfConfig":"35"},{"size":1593,"mtime":1609705247460,"results":"37","hashOfConfig":"35"},{"size":6765,"mtime":1609790842697,"results":"38","hashOfConfig":"35"},{"size":1413,"mtime":1609455519086,"results":"39","hashOfConfig":"35"},{"size":1022,"mtime":1609432522750,"results":"40","hashOfConfig":"35"},{"size":6970,"mtime":1609709631610,"results":"41","hashOfConfig":"35"},{"size":963,"mtime":1609526755861,"results":"42","hashOfConfig":"35"},{"size":1562,"mtime":1609526755865,"results":"43","hashOfConfig":"35"},{"size":216,"mtime":1609419242861,"results":"44","hashOfConfig":"35"},{"size":1446,"mtime":1609447320314,"results":"45","hashOfConfig":"35"},{"size":225,"mtime":1609429116021,"results":"46","hashOfConfig":"35"},{"size":1346,"mtime":1609695613210,"results":"47","hashOfConfig":"35"},{"size":4311,"mtime":1609709333994,"results":"48","hashOfConfig":"35"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"eotryk",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"1ls2dmj",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"69"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"69"},"/Users/anna.welc/PhpstormProjects/planner/frontend/src/index.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/App.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/reportWebVitals.ts",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/useFetch.ts",["99"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipes.tsx",["100"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/AddRecipe.tsx",["101","102","103","104","105"],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Home.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/ShoppingList.tsx",[],"/Users/anna.welc/PhpstormProjects/planner/frontend/src/Recipe.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/index.tsx",[],["106","107"],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/reportWebVitals.ts",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/App.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/Home.tsx",["108"],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/ShoppingList.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/useFetch.ts",["109"],"import { useState, useEffect } from 'react';\n\nexport type MethodTypeValues = 'POST' | 'PATCH' | 'DELETE' | 'GET';\n\nexport const MethodType: { [key in MethodTypeValues]: MethodTypeValues } = {\n  POST: 'POST',\n  PATCH: 'PATCH',\n  DELETE: 'DELETE',\n  GET: 'GET'\n};\n\nexport const fetchData = async (url: string, method: MethodTypeValues, body?: any) => {\n  const requestOptions = {\n    method: method,\n    headers: { 'Content-Type': 'application/json' },\n  };\n\n  if (body) {\n    // @ts-ignore\n    requestOptions.body = JSON.stringify(body);\n  }\n\n  return await fetch(url, requestOptions).then(response => response.json());\n};\n\nexport const useFetch = (url: string, method = MethodType.GET, body: any) => {\n  const [status, setStatus] = useState('idle');\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    if (!url) return;\n    setStatus('fetching');\n    fetchData(url, method, body).then((result) => {\n      setData(result);\n      setStatus('fetched');\n    });\n  }, [url, method]);\n\n  return { status, data };\n};","/Users/anna.welc/PhpstormProjects/planner-frontend/src/AddRecipe.tsx",["110","111"],"import React, { FunctionComponent, useState } from 'react';\nimport {Form, Input, Button, Layout, Typography, Upload, Modal, Select, Alert} from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useFormik } from 'formik';\n\nimport { BASE_URL } from './constants/config';\nimport { useRecipesContext } from './useRecipesContext';\n\nconst { Option } = Select;\n\ninterface AddRecipeProps {}\n\ninterface Ingredient {\n  name: string | null;\n  count: string | null;\n  unit: string;\n}\n\n// @ts-ignore\nfunction getBase64(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n}\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst { Content } = Layout;\nconst { Title } = Typography;\n\nexport const AddRecipe: FunctionComponent<AddRecipeProps> = () => {\n  const [ingredients, addIngredients] = useState<Ingredient[]>([]);\n  const [ingredient, setIngredient] = useState<Ingredient>({\n    name: null,\n    count: null,\n    unit: 'gram'\n  });\n  const [images, setImages] = useState({\n    previewVisible: false,\n    previewImage: '',\n    previewTitle: '',\n    fileList: [],\n  });\n  const [isAlertVisible, setAlertVisibility] = useState(false);\n  const { recipes, setRecipes, getRecipes } = useRecipesContext();\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      description: ''\n    },\n    validate: values => {\n      setAlertVisibility(false);\n      const errors = {};\n      if (!values.name) {\n        // @ts-ignore\n        errors.name = 'Required';\n      }\n      return errors;\n    },\n    onSubmit: (values, { resetForm, setSubmitting }) => {\n      setSubmitting(false);\n      resetForm();\n\n      const formData = new FormData();\n      if (images.fileList.length) {\n        // @ts-ignore\n        formData.append('file', images.fileList[0].originFileObj);\n      }\n      formData.append('name', values.name);\n      if (values.description) {\n        formData.append('description', values.description);\n      }\n      if (ingredients && ingredients.length) {\n        formData.append('ingredients', JSON.stringify(ingredients));\n      }\n\n      fetch(`${BASE_URL}/recipes`, {\n        method: 'POST',\n        body: formData\n      })\n        .then((response) => response.json())\n        .then(() => {\n          getRecipes();\n          setAlertVisibility(true);\n        })\n        .catch(error => console.log(error));\n    },\n    enableReinitialize: true,\n  });\n\n  // @ts-ignore\n  const handleIngredientNameChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      name: e.target.value\n    });\n  };\n\n  // @ts-ignore\n  const handleIngredientCountChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      count: e.target.value\n    });\n  };\n\n  // @ts-ignore\n  const handleIngredientUnitChange = (e) => {\n    setIngredient({\n      ...ingredient,\n      unit: e\n    });\n  };\n\n  // @ts-ignore\n  const handleAddIngredientClick= (e) => {\n    if (ingredient.name && ingredient.count) {\n      const ingredientsList = [...ingredients];\n      ingredientsList.push(ingredient);\n      addIngredients(ingredientsList);\n    }\n  };\n\n  const handleCancel = () => setImages({\n    ...images,\n    previewVisible: false\n  });\n\n  // @ts-ignore\n  const handlePreview = async file => {\n    if (!file.url && !file.preview) {\n      file.preview = await getBase64(file.originFileObj);\n    }\n\n    setImages({\n      ...images,\n      previewImage: file.url || file.preview,\n      previewVisible: true,\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)\n    });\n  };\n\n  // @ts-ignore\n  const handleChangeImage = ({ fileList }) => {\n    setImages({\n      ...images,\n      fileList: fileList\n    });\n  };\n\n  const onFinish = () => {\n\n\n    formik.handleSubmit();\n  };\n\n  // @ts-ignore\n  const onFinishFailed = errorInfo => {\n    console.log('Failed:', errorInfo);\n  };\n\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div style={{ marginTop: 8 }}>Upload</div>\n    </div>\n  );\n\n  const { previewVisible, previewImage, fileList, previewTitle } = images;\n\n  return (\n    <Layout>\n      <Content style={{ padding: '50px' }}>\n        <Title level={2}>\n          Add recipe\n        </Title>\n        {isAlertVisible && <Alert message='Recipe edited successfully.' type='success' style={{ marginTop: '10px' }} />}\n        <Form\n          {...layout}\n          name='basic'\n          initialValues={{ remember: true }}\n          onFinish={onFinish}\n          onFinishFailed={onFinishFailed}\n        >\n          <Form.Item\n            label='Name'\n            rules={[{ required: true, message: 'Please input recipe name!' }]}\n            name='name'\n          >\n            <Input value={formik.values.name} name='name' onChange={formik.handleChange} onBlur={formik.handleBlur} />\n          </Form.Item>\n\n          <Form.Item\n            label='Description'\n            rules={[{ required: false }]}\n          >\n            <Input.TextArea value={formik.values.description} name='description' onChange={formik.handleChange} onBlur={formik.handleBlur} />\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            {ingredients && ingredients.map((item, key) =>  <div key={key}>{item.name}, {item.count} {item.unit}</div>)}\n          </Form.Item>\n          <Form.Item label='Add ingredient'>\n            <Input.Group compact>\n              <Input style={{ width: '200px' }} onChange={handleIngredientNameChange} />\n              <Input style={{ width: '80px' }} onChange={handleIngredientCountChange} />\n              <Select defaultValue=\"gram\" onChange={handleIngredientUnitChange}>\n                <Option value=\"gram\">gram</Option>\n                <Option value=\"unit\">unit</Option>\n              </Select>\n              <Button type=\"primary\" onClick={handleAddIngredientClick}><PlusOutlined /></Button>\n            </Input.Group>\n          </Form.Item>\n\n          <Form.Item {...tailLayout}>\n            <Upload\n              listType='picture-card'\n              fileList={fileList}\n              onPreview={handlePreview}\n              onChange={handleChangeImage}\n              beforeUpload={() => false}\n              // customRequest={handleUploadImage}\n            >\n              {fileList.length >= 1 ? null : uploadButton}\n            </Upload>\n            <Modal\n              visible={previewVisible}\n              title={previewTitle}\n              footer={null}\n              onCancel={handleCancel}\n            >\n              <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\n            </Modal>\n          </Form.Item>\n          <Form.Item {...tailLayout}>\n            <Button type='primary' htmlType='submit'>\n              Add recipe\n            </Button>\n          </Form.Item>\n        </Form>\n      </Content>\n    </Layout>\n  );\n};","/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipes.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/Recipe.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/constants/config.ts",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/Context.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/useRecipesContext.ts",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/DrawerContent.tsx",[],"/Users/anna.welc/PhpstormProjects/planner-frontend/src/EditForm.tsx",["112","113","114","115","116"],"import React, { FunctionComponent, useState } from 'react';\nimport { Input, Form, Select, Button, Alert } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { useRecipesContext } from './useRecipesContext';\nimport { EditOutlined, DeleteOutlined } from '@ant-design/icons';\nimport { fetchData, MethodType } from './useFetch';\nimport { Ingredient } from './Recipes';\nimport { BASE_URL } from './constants/config';\nimport { useFormik } from 'formik';\n\nconst { Option } = Select;\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\n\ninterface EditFormProps {\n  name: string;\n  description?: string;\n  ingredients?: Ingredient[];\n  id: string;\n}\n\nexport const EditForm: FunctionComponent<EditFormProps> = ({ name, description, ingredients, id }) => {\n  const { recipes, setRecipes } = useRecipesContext();\n  const [ingredientsList, setIngredients] = useState(ingredients);\n  const [isAlertVisible, setAlertVisibility] = useState(false);\n  const formik = useFormik({\n    initialValues: {\n      name: name,\n      description: description || '',\n      ingredients: ingredients || [],\n      id: id\n    },\n    validate: values => {\n      setAlertVisibility(false);\n      const errors = {};\n      if (!values.name) {\n        // @ts-ignore\n        errors.name = 'Required';\n      }\n      return errors;\n    },\n    onSubmit: values => {\n      const body = {\n        name: values.name,\n        description: values.description,\n        ingredients: ingredients\n      };\n\n      fetchData(`${BASE_URL}/recipes/${formik.values.id}`, MethodType.PATCH, body).then(() => {\n        const changedRecipes = recipes.map((item) => {\n          if (item._id === values.id) {\n            return {\n              ...item,\n              name: values.name,\n              description: values.description\n            }\n          }\n          return item;\n        });\n        setRecipes(changedRecipes);\n        setAlertVisibility(true);\n      });\n    },\n    enableReinitialize: true,\n  });\n\n  const list = ingredientsList && ingredientsList.map((item, key) =>\n    <li key={key}>{item.name} {item.count}, {item.unit} <b>minus</b></li>);\n\n  const onFinishFailed = () => {\n    console.log('test finish');\n  };\n\n  const handleBlur = () => {\n\n  };\n\n  const handleIngredientNameChange = () => {\n\n  };\n\n  const handleIngredientCountChange = () => {\n\n  };\n\n  const handleDeleteRecipe = () => {\n    fetchData(`${BASE_URL}/recipes/${formik.values.id}`, MethodType.DELETE).then(() => {\n      const index = recipes.findIndex((item) => item._id === formik.values.id);\n      const copyRecipes = [...recipes];\n      copyRecipes.splice(index, 1);\n      setRecipes(copyRecipes);\n    });\n  };\n\n  return (\n    <div>\n      <Form\n        {...layout}\n        name='basic'\n        initialValues={{ remember: true }}\n        onFinish={formik.submitForm}\n        onFinishFailed={onFinishFailed}\n      >\n        <Form.Item\n          label='Name'\n          rules={[{ required: true, message: 'Please input recipe name!' }]}\n        >\n          <Input value={formik.values.name} name='name' onChange={formik.handleChange} onBlur={handleBlur} />\n        </Form.Item>\n\n        <Form.Item\n          label='Description'\n          rules={[{ required: false }]}\n        >\n          <Input.TextArea value={formik.values.description} name='description' onChange={formik.handleChange} onBlur={handleBlur} />\n        </Form.Item>\n\n        {list}\n\n        {/*<Form.Item label='Add ingredient'>*/}\n        {/*  <Input.Group compact>*/}\n        {/*    <Input />*/}\n        {/*    <Input />*/}\n        {/*    <Select defaultValue='gram'>*/}\n        {/*      <Option value='gram'>gram</Option>*/}\n        {/*      <Option value='unit'>unit</Option>*/}\n        {/*    </Select>*/}\n        {/*    <Button type='primary'><PlusOutlined /></Button>*/}\n        {/*  </Input.Group>*/}\n        {/*</Form.Item>*/}\n\n        <div>\n          <Button htmlType='submit' icon={<EditOutlined />} style={{ marginRight: '8px' }}>\n            Edit recipe\n          </Button>\n          <Button danger icon={<DeleteOutlined />} onClick={handleDeleteRecipe}>\n            Remove recipe\n          </Button>\n        </div>\n      </Form>\n      {isAlertVisible && <Alert message='Recipe edited successfully.' type='success' style={{ marginTop: '10px' }} />}\n    </div>\n  );\n};",{"ruleId":"117","severity":1,"message":"118","line":38,"column":6,"nodeType":"119","endLine":38,"endColumn":19,"suggestions":"120"},{"ruleId":null,"fatal":true,"severity":2,"message":"121","line":16,"column":0},{"ruleId":"122","severity":1,"message":"123","line":6,"column":10,"nodeType":"124","messageId":"125","endLine":6,"endColumn":19},{"ruleId":"122","severity":1,"message":"126","line":6,"column":21,"nodeType":"124","messageId":"125","endLine":6,"endColumn":31},{"ruleId":"122","severity":1,"message":"127","line":59,"column":10,"nodeType":"124","messageId":"125","endLine":59,"endColumn":20},{"ruleId":"122","severity":1,"message":"128","line":59,"column":22,"nodeType":"124","messageId":"125","endLine":59,"endColumn":35},{"ruleId":"122","severity":1,"message":"129","line":160,"column":9,"nodeType":"124","messageId":"125","endLine":160,"endColumn":18},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"122","severity":1,"message":"134","line":2,"column":86,"nodeType":"124","messageId":"125","endLine":2,"endColumn":91},{"ruleId":"117","severity":1,"message":"118","line":37,"column":6,"nodeType":"119","endLine":37,"endColumn":19,"suggestions":"135"},{"ruleId":"122","severity":1,"message":"136","line":54,"column":11,"nodeType":"124","messageId":"125","endLine":54,"endColumn":18},{"ruleId":"122","severity":1,"message":"137","line":54,"column":20,"nodeType":"124","messageId":"125","endLine":54,"endColumn":30},{"ruleId":"122","severity":1,"message":"138","line":3,"column":10,"nodeType":"124","messageId":"125","endLine":3,"endColumn":22},{"ruleId":"122","severity":1,"message":"139","line":11,"column":9,"nodeType":"124","messageId":"125","endLine":11,"endColumn":15},{"ruleId":"122","severity":1,"message":"140","line":27,"column":27,"nodeType":"124","messageId":"125","endLine":27,"endColumn":41},{"ruleId":"122","severity":1,"message":"141","line":81,"column":9,"nodeType":"124","messageId":"125","endLine":81,"endColumn":35},{"ruleId":"122","severity":1,"message":"142","line":85,"column":9,"nodeType":"124","messageId":"125","endLine":85,"endColumn":36},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'body'. Either include it or remove the dependency array.","ArrayExpression",["143"],"Parsing error: Type expected.","@typescript-eslint/no-unused-vars","'fetchData' is defined but never used.","Identifier","unusedVar","'MethodType' is defined but never used.","'experyment' is assigned a value but never used.","'setExperyemnt' is assigned a value but never used.","'testInput' is assigned a value but never used.","no-native-reassign",["144"],"no-negated-in-lhs",["145"],"'Empty' is defined but never used.",["146"],"'recipes' is assigned a value but never used.","'setRecipes' is assigned a value but never used.","'PlusOutlined' is defined but never used.","'Option' is assigned a value but never used.","'setIngredients' is assigned a value but never used.","'handleIngredientNameChange' is assigned a value but never used.","'handleIngredientCountChange' is assigned a value but never used.",{"desc":"147","fix":"148"},"no-global-assign","no-unsafe-negation",{"desc":"147","fix":"149"},"Update the dependencies array to be: [url, method, body]",{"range":"150","text":"151"},{"range":"152","text":"151"},[1007,1020],"[url, method, body]",[976,989]]